<#@ template cleanws="true" #>
namespace Qint.Wrapper
{
	internal static partial class NativeMethods
	{
		public static string PropertyIdToName(PropertyId id)
		{
			switch (id.Type)
			{
<# for struc in &self.structs {
	let mut ids = String::new(); #>
			case PropertyIdType.<#= struc.name #>:
				return "<#= struc.name #>";
<# } #>

<# for struc in &self.structs {
	for p in get_properties(&self.structs, struc) {
		let prop_name = get_property_name(p);
		let mut ids = String::new(); #>
			case PropertyIdType.<#= struc.name #><#= prop_name #>:
				return "<#= prop_name #>";
<# }
} #>
			default:
				throw new Exception("Unknown property id type");
			}
		}

		public static ulong[] PropertyIdToIdPath(PropertyId id, ConnectionId conId)
		{
			switch (id.Type)
			{
<# for struc in &self.structs {
	// TODO Type and Property enums are missing
	let mut ids = String::new();
	let path = &self.1.get(&struc.name).unwrap_or_else(||
		panic!("Paths do not contain {}", struc.name));
	let mut path_ids = path.ids.join(", ");
	if !path_ids.is_empty() {
		path_ids = format!(", {}", path_ids);
	}
	#>
			case PropertyIdType.<#= struc.name #>: {
	<# for (i, id) in struc.id.iter().enumerate() {
		let p = id.find_property(&self.structs);
		let n = if struc.id.len() != 1 {
			i.to_string()
		} else {
			"".into()
		};
		if i >= path.id_count {
			ids.push_str(", ");
			ids.push_str(&format!("i{}", i));
		}
		if p.type_s == "str" { #>
				ulong i<#= i #> = (ulong) id.<#= struc.name #><#= n #>.GetHashCode();
		<# } else { #>
				ulong i<#= i #> = id.<#= struc.name #><#= n #>.Value;
		<# }
	} #>
				return new ulong[] {conId.Value<#= path_ids #><#= ids #>};
			}
<# } #>

<# for struc in &self.structs {
	let path = &self.1.get(&struc.name).unwrap_or_else(||
		panic!("Paths do not contain {}", struc.name));
	let mut path_ids = path.ids.join(", ");
	if !path_ids.is_empty() {
		path_ids = format!(", {}", path_ids);
	}
	for p in get_properties(&self.structs, struc) {
		let prop_name = get_property_name(p);
		let mut ids = String::new();
		let mut i = 0;
		#>
			case PropertyIdType.<#= struc.name #><#= prop_name #>: {
		<# for (j, id) in struc.id.iter().enumerate() {
			let id_p = id.find_property(&self.structs);
			let n = if struc.id.len() != 1 || p.modifier.is_some() {
				j.to_string()
			} else {
				"".into()
			};
			if i >= path.id_count {
				ids.push_str(", ");
				ids.push_str(&format!("i{}", i));
			}
			if id_p.type_s == "str" { #>
				ulong i<#= i #> = (ulong) id.<#= struc.name #><#= prop_name #><#= n #>.GetHashCode();
			<# } else { #>
				ulong i<#= i #> = id.<#= struc.name #><#= prop_name #><#= n #>.Value;
			<# }
			i += 1;
		}

		ids.push_str(", ");
		ids.push_str(&format!("(ulong) {}PropertyId.{}", struc.name, prop_name));

		if let Some(m) = &p.modifier {
			// Append plural s
			ids.push('s');

			let key_type = if m == "map" {
				// The key is part of the id
				p.key.as_ref().unwrap()
			} else if m == "array" {
				// Take the element itself as port of the id.
				// It has to be copied but most of the times it is an id itself.
				&p.type_s
			} else {
				panic!("Unknown modifier {}", m);
			};
			let n = if !struc.id.is_empty() {
				struc.id.len().to_string()
			} else {
				"".into()
			};
			if i >= path.id_count {
				ids.push_str(", ");
				ids.push_str(&format!("i{}", i));
			}
			if key_type == "str" { #>
				ulong i<#= i #> = (ulong) id.<#= struc.name #><#= prop_name #><#= n #>.GetHashCode();
			<# } else { #>
				ulong i<#= i #> = id.<#= struc.name #><#= prop_name #><#= n #>.Value;
			<# }
			i += 1;
		} #>
				return new ulong[] {conId.Value<#= path_ids #><#= ids #>};
			}
<# }
} #>
			default:
				throw new Exception("Unknown property id type");
			}
		}
	}
}
