<#@ template cleanws="true" #>
<#
// These functions are not generally marked as unsafe, even if they are unsafe
// to use. This is done to keep the amount of safe code high (so the compiler
// errors when there is a fault in the code) and we expect that these functions
// are only used via ffi, so not called from Rust.

// Getter
for struc in &self.0.structs {
	for prop in struc.properties.iter().filter(|p|
		// Nested struct which is not a map
		(!self.0.structs.iter().any(|s| s.name == p.type_s)
			|| p.modifier.as_ref().map(|s| s == "map").unwrap_or(false))) {
		let mut id_args = get_id_args(&self.0.structs, &struc);
		let is_map = prop.modifier.as_ref().map(|s| s == "map").unwrap_or(false);
		let is_array = prop.modifier.as_ref().map(|s| s == "array").unwrap_or(false);

		if !id_args.is_empty() {
			id_args.push_str(", ");
		}
		let type_s;
		#>
#[no_mangle]
pub extern "C" fn tscl_get_<#= to_snake_case(&struc.name) #>_<#= to_snake_case(&prop.name) #>(con_id: ConnectionId,
	<#= id_args #><#
		if is_array || is_map { #>len: *mut usize, <# } #>error: *mut *mut c_char) -> <#=

		if is_map {
			// Return keys for map
			type_s = prop.key.as_ref().unwrap();
			format!("*mut {}", get_ffi_type(type_s))
		} else if is_array {
			type_s = &prop.type_s;
			format!("*mut {}", get_ffi_type(type_s))
		} else {
			type_s = &prop.type_s;
			get_ffi_type(type_s)
		}

		#> {
	unsafe { *error = std::ptr::null_mut(); }
	// Get connection
	let con = if let Some(con) = CONNECTIONS.get(&con_id) {
		con.clone()
	} else {
		// Throw an exception
		unsafe { *error = Error::ConnectionNotFound.ffi(); }
		<# if get_ffi_type(&prop.type_s) == "*mut c_char" || is_map || is_array { #>
		return std::ptr::null_mut();
		<# } else { #>
		return Default::default();
		<# } #>
	};
	let con = con.lock();
	let val = con.get_<#= to_snake_case(&struc.name) #>(<#= get_id_arg_names(&self.0.structs, &struc) #>);
	<# if prop.opt { #>
	let val = if let Some(r) = val.<#= to_snake_case(&prop.name) #>.as_ref() {
		r
	} else {
		// Throw an exception
		unsafe { *error = "<#= prop.name #> does not exist".ffi(); }
		<# if get_ffi_type(&prop.type_s) == "*mut c_char" || is_map || is_array { #>
		return std::ptr::null_mut();
		<# } else { #>
		return Default::default();
		<# } #>
	};
	<# } else { #>
	let val = &val.<#= to_snake_case(&prop.name) #>;
	<# } #>

	<# if is_map || is_array { #>
	let mut val = val.<#= if is_map { "keys" } else { "iter" }
	#>().map(|val| <#= convert_val(type_s) #>).collect::<Vec<_>>().into_boxed_slice();
	unsafe { *len = val.len(); }
	let res = val.as_mut_ptr();
	std::mem::forget(val);
	res
}

	<#
		continue;
	} #>
	<# #><#= convert_val(type_s) #>
}

<# }
}

// Setter
for e in &self.1.decls {
	if e.op == RuleOp::Update {
		for r in &e.rules {
			let mut id_args = get_id_args(&self.0.structs, &e.book_struct);
			if !id_args.is_empty() {
				id_args.push_str(", ");
			}
			#>
#[no_mangle]
pub extern "C" fn tscl_set_<#= to_snake_case(&e.book_struct.name) #>_<#= to_snake_case(r.from_name()) #>(con_id: ConnectionId,
	<#= id_args #><#= get_all_arguments_def(e, None) #><#= get_ffi_arguments_def(r) #>) -> FutureHandle {
	// Get connection
	let con = if let Some(con) = CONNECTIONS.get(&con_id) {
		con.clone()
	} else {
		// Throw an exception
		return Error::ConnectionNotFound.fut_ffi();
	};
	let con = con.lock();
	let con = con.to_mut();
	<# if e.book_struct.name == "Connection" { #>
	let val = con;
	<# } else { #>
	let val = if let Some(r) = con.get_mut_<#= to_snake_case(&e.book_struct.name) #>(<#= get_id_arg_names(&self.0.structs, &e.book_struct) #>) {
		r
	} else {
		// Throw an exception
		return Error::from(format_err!("<#= e.book_struct.name #> does not exist")).fut_ffi();
	};
	<# } #>
	val.set_<#= to_snake_case(r.from_name()) #>(<#= get_all_arguments(e, None) #><#= get_ffi_arguments(r) #>).from_err().fut_ffi()
}

		<# }
	}
	// TODO Add, Remove
}
#>
