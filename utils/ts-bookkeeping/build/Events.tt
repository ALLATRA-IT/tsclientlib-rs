<#@ template cleanws="true" #>
/// A `PropertyId` identifies a single attribute in the data structure of a
/// connection.
///
/// This is used in [`EventListener`]s to reference e.g. a newly created
/// channel.
///
/// [`EventListener`]: ../type.EventListener.html
#[derive(Clone, Debug, Deserialize, Eq, Hash, PartialEq, Serialize)]
#[non_exhaustive]
pub enum PropertyId {
<# for struc in &self.structs { #>
	<#= struc.name #><#= struc.get_ids(&self.structs) #>,
<# } #>

<# for struc in &self.structs {
	for p in struc.get_properties(&self.structs) { #>
	<#= struc.name #><#= p.get_name() #><#= p.get_ids(&self.structs, struc) #>,
<# }
} #>
}

/// A `PropertyValue` contains the value of an attribute in the data structures.
///
/// This is used in [`EventListener`]s to get e.g. the attributes of a deleted
/// channel.
///
/// [`EventListener`]: ../type.EventListener.html
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
#[non_exhaustive]
pub enum PropertyValue {
<# for struc in &self.structs { #>
	<#= struc.name #>(<#= struc.name #>),
<# } #>

<#
let mut done = HashSet::new();
for struc in &self.structs {
	for p in struc.get_properties(&self.structs) {
		let type_s = p.get_inner_rust_type(false);
		if !done.insert(type_s.clone()) {
			continue;
		}
		#>
	<#= p.get_inner_rust_type_as_name() #>(<#= type_s #>),
<# }
} #>
}

/// A `PropertyValueRef` contains a reference to the value of an attribute in
/// the data structures.
///
/// See [`PropertyValue`] for the owned variant.
///
/// [`PropertyValue`]: enum.PropertyValue.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum PropertyValueRef<'a> {
<# for struc in &self.structs { #>
	<#= struc.name #>(&'a <#= struc.name #>),
<# } #>

<#
let mut done = HashSet::new();
for struc in &self.structs {
	for p in struc.get_properties(&self.structs) {
		let type_s = p.get_inner_rust_type(false);
		if !done.insert(type_s.clone()) {
			continue;
		}
		#>
	<#= p.get_inner_rust_type_as_name() #>(<#= p.get_inner_rust_type_lifetime() #>),
<# }
} #>
}

impl PropertyValue {
	pub fn as_ref(&self) -> PropertyValueRef {
		match self {
<# for struc in &self.structs { #>
			PropertyValue::<#= struc.name #>(s) => PropertyValueRef::<#= struc.name #>(s),
<# } #>

<#
let mut done = HashSet::new();
for struc in &self.structs {
	for p in struc.get_properties(&self.structs) {
		let type_s = p.get_inner_rust_type(false);
		if !done.insert(type_s.clone()) {
			continue;
		}
		let name = p.get_inner_rust_type_as_name();
		let ref_name = p.get_inner_rust_type_lifetime();
		let has_ref = ref_name.contains('&');
		if p.opt && p.type_s == "str" { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(s.as_ref().map(String::as_ref)),
		<# } else if p.opt && p.type_s == "Uid" { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(s.as_ref().map(Uid::as_ref)),
		<# } else if p.type_s == "Uid" { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(s.as_ref()),
		<# } else if p.opt && has_ref { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(s.as_ref()),
		<# } else if has_ref { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(s),
		<# } else { #>
			PropertyValue::<#= name #>(s) => PropertyValueRef::<#= name #>(*s),
		<# }
	}
} #>
		}
	}
}
