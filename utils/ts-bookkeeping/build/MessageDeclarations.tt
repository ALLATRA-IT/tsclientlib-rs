<#@ template cleanws="true" #>
use std::borrow::Cow;
use std::marker::PhantomData;
use std::mem;

use num_traits::{FromPrimitive, ToPrimitive};
use tsproto_packets::packets::{Direction, Flags, InCommand, OutCommand, OutPacket,
	PacketType};

/*
Resulting code:
Static arguments which depend on 'cmd go into the rental struct, others into the normal struct.

Example for: sendmessage targetmode=1 target=2 static_arg_s=a\|b msg=bc|msg=a\|c
*/

pub trait InMessageTrait<'a> {
	fn new(cmd: &'a InCommand) -> Result<Self> where Self: Sized;
}

#[derive(Debug)]
pub struct InMessage {
	cmd: InCommand,
	msg: InMessages<'static>,
}

#[derive(Debug)]
pub enum InMessages<'a> {
<# for msg_group in &self.0.msg_group {
	for msg in &msg_group.msg { #>
	<#= msg.name #>(In<#= msg.name #><'a>),
<# }
} #>
	Other,
}

impl InMessage {
	pub fn new(cmd: InCommand) -> std::result::Result<Self, (InCommand, ParseError)> {
		let mut res = Self { cmd, msg: InMessages::Other };

		{
			// Parse message
			let msg: InMessages = loop { match res.cmd.data().name {
			<#
				let mut msgs: Vec<_> = self.0.msg_group.iter()
					.flat_map(|g| g.msg.iter())
					.filter(|m| m.notify.is_some())
					.collect();
				msgs.sort_unstable_by_key(|m| m.notify.as_ref().map(|s| s.as_str()).unwrap());
				for (notify, group) in &msgs.iter().group_by(|m| m.notify.as_ref().map(|s| s.as_str()).unwrap()) { #>
				"<#= notify #>" => {<#
					let group: Vec<_> = group.collect();
					let (msg, group) = group.split_last().unwrap();
					for msg in group { #>
					if let Ok(r) = In<#= msg.name #>::new(&res.cmd) {
						break InMessages::<#= msg.name #>(r);
					}<#
					} #> match In<#= msg.name #>::new(&res.cmd) {
						Ok(msg) => break InMessages::<#= msg.name #>(msg),
						Err(e) => return Err((res.cmd, e)),
					}}
			<# } #>
				s => {
					let s = s.to_string();
					return Err((res.cmd, ParseError::UnknownCommand(s)));
				}
			}};

			res.msg = unsafe { mem::transmute(msg) };
		}

		Ok(res)
	}

	#[inline]
	pub fn command(&self) -> &InCommand { &self.cmd }
	#[inline]
	pub fn msg(&self) -> &InMessages { &self.msg }
	#[inline]
	pub fn into_command(self) -> InCommand { self.cmd }
}

<# for msg_group in &self.0.msg_group {
	for msg in &msg_group.msg { #>
#[derive(Debug)]
pub struct In<#= msg.name #><'a> {
<# if msg_group.default.response { #>
	pub return_code: Option<&'a str>,
<# } #>
	list: Vec<<#= msg.name #>Part<'a>>,
}

#[derive(Debug)]
pub struct <#= msg.name #>Part<'a> {
<# for a in &msg.attributes {
	let field = self.0.get_field(a);
	if field.get_rust_name() != field.ts { #>
	/// `<#= field.ts #>` in TeamSpeak.
	<# } #>
	pub <#= field.get_rust_name() #>: <#= field.get_rust_type(a, true).replace("&", "&'a ").replace("UidRef", "UidRef<'a>") #>,
<# }
	/// Use the lifetime and make this struct non-exhaustive.
#>
	pub phantom: PhantomData<&'a ()>,
}

impl<'a> InMessageTrait<'a> for In<#= msg.name #><'a> {
	fn new(cmd: &'a InCommand) -> Result<Self> {
		let data = cmd.data();
		if data.name != "<#= msg.notify.as_ref().map(|s| s.as_str()).unwrap_or("") #>" {
			return Err(ParseError::WrongCommand(data.name.to_string()));
		}
		if <#= if msg_group.default.np { "!" } else { "" } #>cmd.newprotocol() { return Err(ParseError::WrongNewprotocol(cmd.newprotocol())); }
		if cmd.packet_type() != PacketType::Command<#= if msg_group.default.low { "Low" } else { "" } #> { return Err(ParseError::WrongPacketType(cmd.packet_type())); }
		<# if !msg_group.default.s2c { #>
		if cmd.direction() == Direction::S2C { return Err(ParseError::WrongDirection(cmd.direction())); }
		<# } #>
		<# if !msg_group.default.c2s { #>
		if cmd.direction() == Direction::C2S { return Err(ParseError::WrongDirection(cmd.direction())); }
		<# } #>
	<# if msg_group.default.response { #>

		// Get return code
		let return_code = cmd.data().static_args.iter()
			.find(|(k, _)| *k == "return_code")
			.map(|(_, v)| v.as_ref());
	<# } #>

		// List arguments
		let mut list = Vec::new();
		for <#= if msg.attributes.is_empty() { "_" } else { "ccmd" } #> in cmd.iter() {
			list.push(<#= msg.name #>Part {
		<# for a in &msg.attributes {
			let field = self.0.get_field(a); #>
				<#= field.get_rust_name() #>: {
				<# if !a.ends_with('?') { /* is not optional */ #>
					let val = ccmd.0.get("<#= field.ts #>")
						.ok_or(ParseError::ParameterNotFound { arg: "<#= field.pretty #>", name: "<#= msg.name #>", })?;
					<#= generate_deserializer(field) #>				},
				<# } else { #>
					if let Some(val) = ccmd.0.get("<#= field.ts #>") {
						Some({ <#= generate_deserializer(field) #> })
					} else { None } },
				<# } #>
		<# } #>
				phantom: PhantomData,
			});
		}
		// TODO Still missing: Warn if there are more arguments than we parsed

		Ok(In<#= msg.name #> {<# if msg_group.default.response { #> return_code,<# } #> list })
	}
}

impl<'a> In<#= msg.name #><'a> {
	#[inline]
	pub fn iter(&self) -> InMessageIterator<<#= msg.name #>Part> { self.into_iter() }
}

impl<'a> IntoIterator for &'a In<#= msg.name #><'a> {
	type Item = &'a <#= msg.name #>Part<'a>;
	type IntoIter = InMessageIterator<'a, <#= msg.name #>Part<'a>>;
	#[inline]
	fn into_iter(self) -> Self::IntoIter { InMessageIterator(&self.list, 0) }
}

<# }
} #>

/// The iterator is guaranteed to output at least one part.
pub struct InMessageIterator<'a, T>(&'a [T], usize);
impl<'a, T> Iterator for InMessageIterator<'a, T> {
	type Item = &'a T;
	fn next(&mut self) -> Option<Self::Item> {
		let i = self.1;
		self.1 += 1;
		self.0.get(i)
	}
}

<# for msg_group in &self.0.msg_group {
	let defs = &msg_group.default;
	for msg in &msg_group.msg { #>

pub struct Out<#= msg.name #>Message;
impl Out<#= msg.name #>Message {
	pub fn new<'a, I: Iterator<Item=<#= msg.name #>Part<'a>>>(list: I<#=
			if msg_group.default.response { ", return_code: Option<&str>" } else { "" } #>) -> OutPacket {
		let mut packet = OutPacket::new_with_dir(Direction::<#= if msg_group.default.s2c { "S2C" } else { "C2S" } #>,
			Flags::<#= if msg_group.default.np { "NEWPROTOCOL" } else { "empty()" }
			#>, PacketType::Command<#= if msg_group.default.low { "Low" } else { "" } #>);
	<# if msg_group.default.response { #>
		let static_args = return_code.iter().map(|s| ("return_code", Cow::Borrowed(*s)));
	<# } else { #>
		let static_args = std::iter::empty();
	<# }

	if msg.attributes.is_empty() { #>
		let list_args = list.map(|_| { std::iter::empty() });
	<# } else { #>
		let list_args = list.map(|p| {
			let mut res = Vec::new();
		<# for a in &msg.attributes {
			let field = self.0.get_field(a);
			let val = format!("p.{}", field.get_rust_name());
			if a.ends_with('?') { #>
			if let Some(val) = <#= val #> { res.push(("<#= field.ts #>", <#= generate_serializer(field, "val") #>)); }
			<# } else { #>
			res.push(("<#= field.ts #>", <#= generate_serializer(field, &val) #>));
			<# } #>
		<# } #>
			res.into_iter()
		});
	<# } #>
		OutCommand::new_into::<&'static str, Cow<str>, &'static str, Cow<str>, _, _, _>(
			"<#= msg.notify.as_ref().map(|s| s.as_str()).unwrap_or("") #>", static_args, list_args, packet.data_mut());
		packet
	}
}
<# }
} #>
