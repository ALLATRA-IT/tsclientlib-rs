<#@ template cleanws="true" #>
<#
/// Push into events the difference between two arrays.
///
/// The old value is stored in a `Vec` in `old`, the `new` in the book.
fn diff(_fmt: &mut std::fmt::Formatter, new: &str, event: &Event, p: &Property, from: &Field) -> std::fmt::Result {
	let mut ids = get_id_args(event);
	let type_s = get_rust_type(p);
	let type_s = type_s.replace('<', "_").replace('>', "").to_camel_case();
#>
					// Added
					for i in <#= new #>.iter().filter(|n| !old.contains(n)) {
						events.push(Event::PropertyAdded {
							id: PropertyId::<#= get_property_name(event, p) #>(<#= ids #>, *i),
							invoker: invoker.clone(),
						});
					}

					// Removed
					for i in old.into_iter().filter(|o| !<#= new #>.contains(o)) {
						events.push(Event::PropertyRemoved {
							id: PropertyId::<#= get_property_name(event, p) #>(<#= ids #>, i),
							old: PropertyValue::<#= type_s #>(i),
							invoker: invoker.clone(),
						});
					}
<#
	Ok(())
}

#>
impl Connection {
	/// Return if the message was handled and the generated events.
	fn handle_command_generated(&mut self, msg: &InMessage) -> Result<(bool, Vec<Event>)> {
		let mut events = Vec::new();
		match msg {
<# for event in &self.decls {
	let msg_name = &event.msg.name;
	let book_name = &event.book_struct.name;
#>
			InMessage::<#= msg_name #>(m) => for m in m.iter() {
				#[allow(unused_variables)]
				let invoker = m.get_invoker();

			<# if event.op == RuleOp::Remove {
				let function_name = format!("remove_{}", book_name.to_snake_case());
				let ids = get_id_args(event);
				let ids2 = if !ids.is_empty() {
					format!("({})", ids)
				} else {
					ids.clone()
				};
				#>
				let old = self.<#= function_name #>(<#= ids #>)?
					.ok_or_else(|| format_err!("<#= book_name #> \
						should be removed but does not exist"))?;
				events.push(Event::PropertyRemoved {
					id: PropertyId::<#= book_name #><#= ids2 #>,
					old: PropertyValue::<#= book_name #>(old),
					invoker: invoker.clone(),
				});
			<# } else if event.op == RuleOp::Update { #>
				<# // Update the object
				// Functions first
				let mut rule_count = event.rules.len();
				for rule in &event.rules {
					if let RuleKind::Function { name, to } = rule {
						rule_count -= 1; #>
				self.<#= name.to_snake_case() #>(<#= get_id_args(event) #>, m, &mut events)?;
					<# }
				}
				let function_name = format!("get_mut_{}", book_name.to_snake_case());

				// Only print if necessary
				if rule_count > 0 { #>
				let r = self.<#= function_name #>(<#= get_id_args(event) #>)?;
				<# }
				for rule in &event.rules {
					match rule {
						RuleKind::Map { from, to, op } => {
							// Put field from packet into bookkeeping struct
							match op {
								RuleOp::Update => {
									let from_opt = from.is_opt(&event.msg);
									// to/book is optional, but from/message not
									if to.opt && !from_opt { #>
				let old = mem::replace(&mut r.<#= to.name.to_snake_case() #>, Some(m.<#= from.get_rust_name() #>.clone()));
				events.push(Event::PropertyChanged {
					id: <#= get_property_id(event, to, from) #>,
					old: <#= get_property(to, "old") #>,
					invoker: invoker.clone(),
				});
									<# } else if from_opt { #>
				if let Some(val) = &m.<#= from.get_rust_name() #> {
									<# if to.opt { #>
					let old = mem::replace(&mut r.<#= to.name.to_snake_case() #>, Some(val.clone()));
									<# } else { #>
					let old = mem::replace(&mut r.<#= to.name.to_snake_case() #>, val.clone());
									<# } #>
				<# if from.modifier.as_ref().map(|s| s == "array").unwrap_or(false) {
					diff(_fmt, &format!("r.{}", to.name.to_snake_case()), event, to, from)?;
				} else { #>
					events.push(Event::PropertyChanged {
						id: <#= get_property_id(event, to, from) #>,
						old: <#= get_property(to, "old") #>,
						invoker: invoker.clone(),
					});
				<# } #>
				}
									<# } else {
										// Nothing is optional
										#>
				let old = mem::replace(&mut r.<#= to.name.to_snake_case() #>, m.<#= from.get_rust_name() #>.clone());
				events.push(Event::PropertyChanged {
					id: <#= get_property_id(event, to, from) #>,
					old: <#= get_property(to, "old") #>,
					invoker: invoker.clone(),
				});
								<# }
								}
								// The field in the struct is a vector
								RuleOp::Add => { #>
				r.<#= to.name.to_snake_case() #>.push(m.<#= from.get_rust_name() #>.clone());
				events.push(Event::PropertyAdded {
					id: <#= get_property_id(event, to, from) #>,
					invoker: invoker.clone(),
				})
								<# }
								RuleOp::Remove => { #>
				// Find index and remove
				if let Some(i) = r.<#= to.name.to_snake_case() #>.iter().position(|i| *i == m.<#= from.get_rust_name() #>) {
					let old = r.<#= to.name.to_snake_case() #>.remove(i);
					events.push(Event::PropertyRemoved {
						id: <#= get_property_id(event, to, from) #>,
						old: <#= get_property(to, "old") #>,
						invoker: invoker.clone(),
					});
				}
								<# }
							}
						}

						RuleKind::Function { to, .. } => {}
					}
				}
			} else if event.op == RuleOp::Add {
				// Create a new object
				// First, call all functions
				for fun in event.rules.iter().filter(|r| r.is_function()) {
					if let RuleKind::Function { name, to } = fun { #>
				let <#= gen_return_match(to) #> = self.<#= name.to_snake_case() #>(m)?;
					<# }
				} #>
				let r = <#= book_name #> {
				<#
				// Add ids
				for (id, fld) in event.book_struct.id.iter().zip(event.id.iter()) { #>
					<#= PropId::from(id).get_attr_name(&event.book_struct) #>: m.<#= fld.get_rust_name() #>.clone(),
				<# }

				let v = vec![];
				// Function return values
				for p in event.rules.iter()
					.flat_map(|f| if let RuleKind::Function { to, .. } = f {
						to
					} else {
						&v
					}) { #>
					<#= p.name.to_snake_case() #>,
				<# }
				for p in event.rules.iter() {
					if let RuleKind::Map { from, to, op } = p {
						if *op != RuleOp::Update {
							panic!("Cannot add or remove when adding a new struct");
						}
						// to is optional, but from not
						let from_opt = from.is_opt(&event.msg); #>
					<#= to.name.to_snake_case() #>: <#
						if to.opt && !from_opt {
						#>Some(m.<#= from.get_rust_name() #>.clone()),<#
						} else {
						#>m.<#= from.get_rust_name() #>.clone(),<# }
						#>
					<# }
				}
				let function_name = format!("add_{}", book_name.to_snake_case());
				let ids = get_id_args(event);
				let ids2 = if !ids.is_empty() {
					format!("({})", ids)
				} else {
					ids.clone()
				}; #>
				};
				self.<#= function_name #>(<#= ids #>, r)?;
				events.push(Event::PropertyAdded {
					id: PropertyId::<#= book_name #><#= ids2 #>,
					invoker: invoker.clone(),
				});
			<# } #>
			}
<# } #>
			_ => {
				// Ignore unmentioned messages
				return Ok((false, events));
			}
		}
		Ok((true, events))
	}
}
