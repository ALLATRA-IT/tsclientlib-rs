<#@ template cleanws="true" #>
<# for struc in &self.0.structs {
	// TODO Don't unwrap, throw exceptions
	for prop in struc.properties.iter().filter(|p|
		// Nested struct which is not a map
		(!self.0.structs.iter().any(|s| s.name == p.type_s)
			|| p.modifier.as_ref().map(|s| s == "map").unwrap_or(false))
		&& !is_special_type(&p.type_s)) {
		let id_args = get_id_args(&self.0.structs, &struc);
		let is_map = prop.modifier.as_ref().map(|s| s == "map").unwrap_or(false);
		let is_array = prop.modifier.as_ref().map(|s| s == "array").unwrap_or(false);
		let type_s; #>
#[no_mangle]
pub extern "C" fn get_<#= to_snake_case(&struc.name) #>_<#= to_snake_case(&prop.name) #>(con_id: ConnectionId,
	<#= id_args #><#
		if is_array || is_map { #><# if !id_args.is_empty() { #>, <# } #>len: *mut usize<# } #>) -> <#=

		if is_map {
			// Return keys for map
			type_s = prop.key.as_ref().unwrap();
			format!("*mut {}", get_ffi_type(type_s))
		} else if is_array {
			type_s = &prop.type_s;
			format!("*mut {}", get_ffi_type(type_s))
		} else {
			type_s = &prop.type_s;
			get_ffi_type(type_s)
		}

		#> {
	// Get connection
	let con = if let Some(con) = CONNECTIONS.get(&con_id) {
		con.clone()
	} else {
		// TODO Somehow throw an exception in C#
		println!("FAILED TO GET PROPERTY <#= struc.name #>.<#= prop.name #>");
		<# if get_ffi_type(&prop.type_s) == "*mut c_char" || is_map || is_array { #>
		return std::ptr::null_mut();
		<# } else { #>
		return Default::default();
		<# } #>
	};
	let con = con.lock();
	let val = con.get_<#= to_snake_case(&struc.name) #>(<#= get_id_arg_names(&self.0.structs, &struc) #>);
	let val = &val.<#= to_snake_case(&prop.name) #><# if prop.opt { /* TODO */ #>.as_ref().unwrap()<# } #>;

	<# if is_map || is_array { #>
	let mut val = val.<#= if is_map { "keys" } else { "iter" }
	#>().map(|val| <#= convert_val(type_s, false) #>).collect::<Vec<_>>().into_boxed_slice();
	unsafe { *len = val.len(); }
	let res = val.as_mut_ptr();
	std::mem::forget(val);
	res
}
	<#
		continue;
	} #>
	<#= convert_val(type_s, prop.opt) #>
}

<# }
} #>
