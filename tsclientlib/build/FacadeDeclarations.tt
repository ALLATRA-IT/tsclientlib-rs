<#@ template cleanws="true" #>
<# for struc in &self.0.structs { #>
<#= doc_comment(&struc.doc) #>
pub struct <#= struc.name #>Mut<'a> {
	pub(crate) connection: &'a mut ConnectedConnection,
	pub(crate) inner: &'a <#= struc.name #>,
}

impl<'a> Deref for <#= struc.name #>Mut<'a> {
	type Target = <#= struc.name #>;

	fn deref(&self) -> &Self::Target {
		self.inner
	}
}

impl<'a> <#= struc.name #>Mut<'a> {
<#
// Struct properties
for p in struc.properties.iter().filter(|p| p.get_get(struc)
	// Not an id of this struct
	&& !struc.id.iter().any(|i| i.struct_name == struc.name && i.prop == p.name)
	// Is a struct
	&& self.0.structs.iter().any(|s| s.name == p.type_s)) {
	let p_struct = self.0.structs.iter().find(|s| s.name == p.type_s).unwrap();
	let pid = PropId::Prop(p);

	if p.modifier.as_ref().map(|s| s == "map").unwrap_or(false) {
		let attr_name = pid.get_attr_name(&struc);
		let attr_name = if attr_name.ends_with('s') {
			&attr_name[..attr_name.len() - 1]
		} else { &attr_name };
		#>
	pub fn get_<#= attr_name #><'b>(&'b mut self, key: &<#= p.key.as_ref().unwrap() #>) -> Option<<#= p_struct.name #>Mut<'b>> {
		if let Some(inner) = self.inner.<#= pid.get_attr_name(&struc) #>.get(key) {
			Some(<#= p_struct.name #>Mut {
				connection: self.connection,
				inner,
			})
		} else {
			None
		}
	}
	<# } else if p.modifier.is_none() {

		if !p.opt { #>
	pub fn get_<#= pid.get_attr_name(&struc) #><'b>(&'b mut self) -> <#= p_struct.name #>Mut<'b> {
		<#= p_struct.name #>Mut {
			connection: self.connection,
			inner: &self.inner.<#= pid.get_attr_name(&struc) #>,
		}
	}
		<# } else { #>
	pub fn get_<#= pid.get_attr_name(&struc) #><'b>(&'b mut self) -> Option<<#= p_struct.name #>Mut<'b>> {
		let con: &'b mut ConnectedConnection = self.connection;
		if let Some(inner) = &self.inner.<#= pid.get_attr_name(&struc) #> {
			Some(<#= p_struct.name #>Mut {
				connection: con,
				inner,
			})
		} else {
			None
		}
	}
		<# } #>
	<# } #>
<# }

// Getter for non-struct properties
for p in struc.properties.iter().filter(|p| p.get_get(struc)
		&& p.modifier.is_some()
		// Not an id of this struct
		&& !struc.id.iter().any(|i| i.struct_name == struc.name && i.prop == p.name)
		// Is no struct
		&& !self.0.structs.iter().any(|s| s.name == p.type_s)) {
	let pid = PropId::Prop(p);
	let name = if p.name.ends_with('s') {
		&p.name[..p.name.len() - 1]
	} else { &p.name };
	let name = format!("{}{}", struc.name, name);
	let attr_name = pid.get_attr_name(&struc);
	let attr_name = if attr_name.ends_with('s') {
		&attr_name[..attr_name.len() - 1]
	} else { &attr_name };

	if p.modifier.as_ref().map(|s| s == "map").unwrap_or(false) { #>
	pub fn get_<#= attr_name #><'b>(&'b mut self, key: &<#= p.key.as_ref().unwrap() #>) -> Option<<#= name #>Mut<'b>> {
		if let Some(inner) = self.inner.<#= pid.get_attr_name(&struc) #>.get(key) {
			Some(<#= name #>Mut {
				connection: self.connection,
				inner,
				parent: self.inner,
			})
		} else {
			None
		}
	}
	<# } else if p.modifier.as_ref().map(|s| s == "array").unwrap_or(false) { #>
	pub fn get_<#= attr_name #><'b>(&'b mut self, index: usize) -> Option<<#= name #>Mut<'b>> {
		if let Some(inner) = self.inner.<#= pid.get_attr_name(&struc) #>.get(index) {
			Some(<#= name #>Mut {
				connection: self.connection,
				inner,
				parent: self.inner,
			})
		} else {
			None
		}
	}
	<# } else if p.modifier.is_none() {

		if !p.opt { #>
	pub fn get_<#= pid.get_attr_name(&struc) #><'b>(&'b mut self) -> <#= name #>Mut<'b> {
		<#= name #>Mut {
			connection: self.connection,
			inner: &self.inner.<#= pid.get_attr_name(&struc) #>,
			parent: self.inner,
		}
	}
		<# } else { #>
	pub fn get_<#= pid.get_attr_name(&struc) #><'b>(&'b mut self) -> Option<<#= name #>Mut<'b>> {
		if let Some(inner) = &self.inner.<#= pid.get_attr_name(&struc) #> {
			Some(<#= name #>Mut {
				connection: self.connection,
				inner,
				parent: self.inner,
			})
		} else {
			None
		}
	}
		<# } #>
	<# } #>
<# } #>
}

<# }


// Create also mut structs for types which occur in maps and arrays so we can do
// client.permissions.get(xxx).delete()
// client.permissions.add(xxx)
let mut props = Vec::new();
for struc in &self.0.structs {
	props.extend(struc.properties.iter().filter(|p| p.get_get(struc)
		&& p.modifier.is_some()
		// Not an id of this struct
		&& !struc.id.iter().any(|i| i.struct_name == struc.name && i.prop == p.name)
		// Is no struct
		&& !self.0.structs.iter().any(|s| s.name == p.type_s))
		.map(|p| (struc, p)));
}

for (struc, p) in &props {
	let name = if p.name.ends_with('s') {
		&p.name[..p.name.len() - 1]
	} else { &p.name };
	let name = format!("{}{}", struc.name, name);
#>

pub struct <#= name #>Mut<'a> {
	pub(crate) connection: &'a mut ConnectedConnection,
	pub(crate) inner: &'a <#= p.type_s #>,
	pub(crate) parent: &'a <#= struc.name #>,
}

impl<'a> Deref for <#= name #>Mut<'a> {
	type Target = <#= p.type_s #>;

	fn deref(&self) -> &Self::Target {
		self.inner
	}
}
<# } #>
