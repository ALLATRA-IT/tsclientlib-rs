<#@ template cleanws="true" #>
impl Connection {
	/// Get a property by its id.
	pub fn get_property(&self, id: &PropertyId) -> Result<PropertyValueRef> {
		Ok(match id {
			PropertyId::__NonExhaustive => panic!("Non exhaustive variant should not be created"),
<# for struc in &self.0.structs {
	let mut ids = get_ids(struc);
	let mut ids2 = get_ids2(&self.0.structs, struc);
	ids2 = format!("({})", ids2);
	if !ids.is_empty() {
		ids = format!("({})", ids);
	} #>
			PropertyId::<#= struc.name #><#= ids #> => PropertyValueRef::<#= struc.name #>(self.get_<#= to_snake_case(&struc.name) #><#= ids2 #><#
				if struc.name != "Server" && struc.name != "Connection" { #>?<# } #>),
<# } #>

<# for struc in &self.0.structs {
	for p in get_properties(&self.0.structs, struc) {
		let type_s = get_rust_type(p);
		let type_s = to_pascal_case(&type_s.replace('<', "_").replace('>', ""));

		let mut ids = get_ids(struc);
		if p.modifier.is_some() {
			if !ids.is_empty() {
				ids.push_str(", ");
			}
			ids.push_str("m");
		}

		let mut ids2 = format!("({})", get_ids2(&self.0.structs, struc));
		if !ids.is_empty() {
			ids = format!("({})", ids);
		}
		#>
			PropertyId::<#= struc.name #><#= get_property_name(p) #><#= ids
				#> => PropertyValueRef::<#= type_s #>(self.get_<#=
				to_snake_case(&struc.name) #><#= ids2 #><#
				if (!ids.is_empty() && struc.name != "Server" )
				|| struc.name.starts_with("Optional")
				|| (struc.name.starts_with("Connection")
					&& struc.name != "Connection") { #>?<# } #>.<#=
				to_snake_case(&p.name) #><#
				if p.modifier.as_ref().map(|s| s == "map").unwrap_or(false) {
					#>.get(*m)
				.ok_or_else(|| format_err!("<#= p.name #> {} not found", m))?<#
				} else if p.modifier.as_ref().map(|s| s == "array").unwrap_or(false) {
					#>.iter()<#
					if p.type_s != "str" { #>.cloned().find(|i| i == m)<#
					} else { #>.find(|i| *i == m)<# } #>
				.ok_or_else(|| format_err!("<#= p.name #> {} not found", m))?<#
				}

				if p.opt && p.type_s == "str" {
					#>.as_ref().map(String::as_ref)<#
				} else if p.type_s == "str" || p.type_s == "Uid" || p.type_s == "TalkPowerRequest" {
					#>.as_ref()<#
				} #>),
<# }
} #>
		})
	}
}
