<#@ template cleanws="true" #>
<# for struc in &self.structs {
    let ids: Vec<_>;
    if !struc.values.id.is_empty() {
        ids = struc.values.id
            .trim_left_matches('[').trim_right_matches(']')
            .split(' ')
            .filter(|s| !s.is_empty())
            .map(|s| self.get_property(s.trim()))
            .collect();
    } else {
        ids = Vec::new();
    }

    let props: Vec<_> = self.properties.iter().filter(|p|
        p.struct_name == struc.name && !ids.contains(&p)).collect();

    let nesteds: Vec<_> = self.nesteds.iter().filter(|p|
        p.struct_name == struc.name).collect();

    let all_props = ids.iter().chain(props.iter());

#>
<#= document(&struc.values.doc) #>
pub struct <#= struc.name #> {
<# for p in all_props {
    if !p.values.doc.is_empty() { #>
<#= indent(document(&p.values.doc), 1) #>
<# } #>
    pub <#= p.get_attr_name(&struc.name) #>: <#= p.type_s #>,
<# }

// Nested structs
for p in &nesteds {
    if !p.values.doc.is_empty() { #>
<#= indent(document(&p.values.doc), 1) #>
<# } #>
    pub <#= p.get_attr_name(&struc.name) #>: <#= p.type_s #>,
<# } #>
}

<# } #>
