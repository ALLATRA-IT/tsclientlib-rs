<#@ template cleanws="true" #>
use chrono::naive::NaiveDateTime;
use chrono::{DateTime, Duration, Utc};
use num::{FromPrimitive, ToPrimitive};
use tsproto::commands::{Command, CanonicalCommand};

<#
fn generate_deserializer(field: &Field) -> String {
    if field.rust_type.starts_with("Vec<") {
        vector_value_deserializer(field)
    } else {
        single_value_deserializer(field, &field.rust_type)
    }
}

fn single_value_deserializer(field: &Field, rust_type: &str)
    -> String {
    match rust_type {
         "i8" |  "u8" |
        "i16" | "u16" |
        "i32" | "u32" |
        "i64" | "u64" => format!("val.parse().map_err(|e| ParseError::ParseInt {{
                arg: \"{}\",
                value: val.to_string(),
                error: e,
            }})?", field.name),
        "f32" | "f64" => format!("val.parse().map_err(|e| ParseError::ParseFloat {{
                arg: \"{}\",
                value: val.to_string(),
                error: e,
            }})?", field.name),
        "bool" => format!("match *val {{ \"0\" => false, \"1\" => true, _ => Err(ParseError::ParseBool {{
                arg: \"{}\",
                value: val.to_string(),
            }})? }}", field.name),
        "Uid" => "Uid(val.to_string())".into(),
        "String" => "val.to_string()".into(),
        "IconHash" => format!("IconHash(val.parse::<u64>().map_err(|e| ParseError::ParseInt {{
                arg: \"{}\",
                value: val.to_string(),
                error: e,
            }})? as i32)", field.name),
        "ClientId" |
        "ClientDbId" |
        "ChannelId" |
        "ServerGroupId" |
        "ChannelGroupId" => format!("{}(val.parse().map_err(|e| ParseError::ParseInt {{
                arg: \"{}\",
                value: val.to_string(),
                error: e,
            }})?)", rust_type, field.name),
        "TextMessageTargetMode" |
        "HostMessageMode" |
        "HostBannerMode" |
        "LicenseType" |
        "Codec" |
        "CodecEncryptionMode" |
        "Reason" |
        "ClientType" |
        "GroupNamingMode" |
        "GroupType" |
        "Permission" |
        "Error" => format!("{}::from_u32(val.parse().map_err(|e| ParseError::ParseInt {{
                arg: \"{}\",
                value: val.to_string(),
                error: e,
            }})?).ok_or(ParseError::InvalidValue {{
                arg: \"{1}\",
                value: val.to_string(),
                }})?", rust_type, field.name),
        "Duration" =>
            if field.type_orig == "TimeSpanSecondsT" {
                format!("let val = val.parse::<i64>().map_err(|e| ParseError::ParseInt {{
                    arg: \"{}\",
                    value: val.to_string(),
                    error: e,
                }})?;
                if let Some(_) = val.checked_mul(1000) {{ Duration::seconds(val) }}
                else {{ Err(ParseError::InvalidValue {{
                    arg: \"{0}\",
                    value: val.to_string(),
                    }})? }}", field.name)
            } else if field.type_orig == "TimeSpanMillisecT" {
                format!("Duration::milliseconds(val.parse::<i64>().map_err(|e| ParseError::ParseInt {{
                    arg: \"{}\",
                    value: val.to_string(),
                    error: e,
                }})?)", field.name)
            } else {
                panic!("Unknown original time type found.");
            },
        "DateTime<Utc>" => format!("DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp_opt(val.parse().map_err(|e| ParseError::ParseInt {{
                    arg: \"{}\",
                    value: val.to_string(),
                    error: e,
                }})?, 0).ok_or(ParseError::InvalidValue {{
                    arg: \"{0}\",
                    value: val.to_string(),
                }})?, Utc)", field.name),
        _ => panic!("Unknown Type '{}'", rust_type),
    }
}

fn vector_value_deserializer(field: &Field) -> String {
    let inner_type = &field.rust_type[4..field.rust_type.len()-1];
    String::from(format!("val.split(' ').map(|val|Ok({})).collect::<Result<Vec<{}>, ParseError>>()?",
        single_value_deserializer(field, inner_type), inner_type))
}

fn generate_serializer(field: &Field, can_move: bool) -> String {
    if field.rust_type.starts_with("Vec<") {
        vector_value_serializer(field, can_move)
    } else {
        single_value_serializer(field, &field.rust_type, can_move)
    }
}

fn single_value_serializer(field: &Field, rust_type: &str, can_move: bool) -> String {
    match rust_type {
         "i8" |  "u8" |
        "i16" | "u16" |
        "i32" | "u32" |
        "i64" | "u64" |
        "f32" | "f64" => "val.to_string()",
        "bool" => if can_move { "String::from(if  val { \"0\" } else { \"1\" })" }
                         else { "String::from(if *val { \"0\" } else { \"1\" })" },
        "String" => if can_move { "val" } else { "val.to_string()" },
        "Uid" => if can_move { "val.0" } else { "val.0.to_string()" },
        "ClientId" |
        "ClientDbId" |
        "ChannelId" |
        "ServerGroupId" |
        "ChannelGroupId" |
        "IconHash" => "val.0.to_string()",
        "TextMessageTargetMode" |
        "HostMessageMode" |
        "HostBannerMode" |
        "LicenseType" |
        "Codec" |
        "CodecEncryptionMode" |
        "Reason" |
        "ClientType" |
        "GroupNamingMode" |
        "GroupType" |
        "Permission" |
        "Error" => "val.to_u32().unwrap().to_string()",
        "Duration" =>
            if field.type_orig == "TimeSpanSecondsT" {
                "val.num_seconds().to_string()"
            } else if field.type_orig == "TimeSpanMillisecT" {
                "val.num_milliseconds().to_string()"
            } else {
                panic!("Unknown original time type found.");
            },
        "DateTime<Utc>" => "val.timestamp().to_string()",
        _ => panic!("Unknown Type '{}'", rust_type),
    }.to_string()
}

fn vector_value_serializer(field: &Field, can_move: bool) -> String {
    let inner_type = &field.rust_type[4..field.rust_type.len()-1];
    // optimizations for special types
    match inner_type {
        "String" => String::from("let mut strb = String::new(); for val in val { if !strb.is_empty() { strb += \",\" } strb += &val; } strb"),
        _ => String::from(format!("let mut strb = String::new(); for val in val {{ if !strb.is_empty() {{ strb += \",\" }} let add = {}; strb += &add; }} strb", single_value_serializer(field, inner_type, can_move))),
    }
}

#>

<# for msg in self.messages.values() {#>
#[derive(Debug, Clone)]
pub struct <#= msg.class_name #> {
<# if msg.is_response { #>
    pub return_code: String,
<# }

    // Attributes
    for p in &msg.params {
        let field = self.fields.get(p).expect(&format!("Missing field: {}", p));
#>
    pub <#= &field.rust_name #>: <#= field.rust_type #>,
<# } #>
}
<#
    if msg.is_notify {
        let _notify = &self.notifies[&msg.notify_name];

        // Do stuff here if needed...
    }
    if msg.is_response {
#>

impl Response for <#= msg.class_name #> {
    fn get_return_code(&self) -> &str {
        &self.return_code
    }
    fn set_return_code(&mut self, return_code: String) {
        self.return_code = return_code;
    }
}
<# } #>

impl<'a> TryParse<&'a CanonicalCommand<'a>> for <#= msg.class_name #> {
    type Err = ParseError;
    fn try_from(<#= if msg.params.len() == 0 { "_cmd" } else { "cmd" } #>: &'a CanonicalCommand<'a>) -> Result<Self, Self::Err> {
        Ok(<#= msg.class_name #> {
<#
    for p in &msg.params {
        let field = self.fields.get(p).unwrap();
#>
            <#= &field.rust_name #>: {
                let val = cmd.args.get("<#= field.ts_name #>")
                    .ok_or(ParseError::ParameterNotFound {
                        arg: "<#= field.name #>",
                    })?;
            <#= generate_deserializer(field) #>},
<# } #>
        })
    }
}

impl<'a> Into<Command> for &'a <#= msg.class_name #> {
    fn into(self) -> Command {
        Command {
            command: String::from("<#= msg.notify_name #>"),
            static_args: vec![
<#
                for p in &msg.params {
                    let field = self.fields.get(p).unwrap();
#>
                (String::from("<#= field.ts_name #>"), { let val = &self.<#= field.rust_name #>; <#= generate_serializer(field, false) #> } ),
<# } #>
            ],
            list_args: vec![],
        }
    }
}

impl Into<Command> for <#= msg.class_name #> {
    fn into(self) -> Command {
        Command {
            command: String::from("<#= msg.notify_name #>"),
            static_args: vec![
<#
                for p in &msg.params {
                    let field = self.fields.get(p).unwrap();
#>
                (String::from("<#= field.ts_name #>"), { let val = self.<#= field.rust_name #>; <#= generate_serializer(field, true) #> } ),
<# } #>
            ],
            list_args: vec![],
        }
    }
}

<# }
// Create notification types
#>
#[derive(Debug, Clone)]
pub enum Notification {
<# for notif in self.notifies.iter() {
    let notify_n = notif.0.as_str();
    let cn = self.messages.iter().find(|x| { &x.1.notify_name == notify_n }).unwrap().1; #>
    <#= notif.1.enum_name #>(<#= cn.class_name #>),
<# } #>
}

impl Notification {
    pub fn parse<'a>(cmd: CanonicalCommand<'a>) -> Result<Notification, ParseError> {
        match cmd.command {
            <# for notif in self.notifies.iter() {
                let notify_n = notif.0.as_str();
                let cn = self.messages.iter().find(|x| { x.1.notify_name == notify_n }).unwrap().1; #>
            "<#= notif.0.as_str() #>" => Ok(Notification::<#= notif.1.enum_name #>(<#= cn.class_name #>::try_from(&cmd)?)),
            <# } #>
            _ => Err(ParseError::UnknownCommand(cmd.command.to_string()))
        }
    }
}

impl Into<Command> for Notification {
    fn into(self) -> Command {
        match self {
            <# for notif in self.notifies.iter() { #>
            Notification::<#= notif.1.enum_name #>(cmd) => cmd.into(),
            <# } #>
        }
    }
}

impl<'a> Into<Command> for &'a Notification {
    fn into(self) -> Command {
        match *self {
            <# for notif in self.notifies.iter() { #>
            Notification::<#= notif.1.enum_name #>(ref cmd) => cmd.into(),
            <# } #>
        }
    }
}
