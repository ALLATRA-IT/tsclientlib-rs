<#@ template cleanws="true" #>
#[cfg(TODO)]
impl ConnectionManager {
<# for g in &self.getters { #>
    fn has_<#= g.name #>(&self, <#= g.args #>) -> bool {
        let r = self.inner.borrow();
        <#= g.has #>
    }
    fn get_<#= g.name #>(&self, <#= g.args #>) -> Ref<<#= g.return_type #>> {
        Ref::map(self.inner.borrow(), |r| <#= g.get #>)
    }
    fn get_mut_<#= g.name #>(&mut self, <#= g.args #>) -> RefMut<<#= g.return_type #>> {
        RefMut::map(self.inner.borrow_mut(), |r| <#= g.get_mut #>)
    }
<# if let Some(add) = g.add { #>
    /// Returns the old element with the same key if it existed.
    fn add_<#= g.name #>(&mut self, <#= g.args #>, val: <#= g.return_type #>) -> Option<<#= g.return_type #>> {
        let mut r = self.inner.borrow_mut();
        <#= add #>
    }
<# } #>
<# if let Some(remove) = g.remove { #>
    /// Returns the old element if it existed.
    fn remove_<#= g.name #>(&mut self, <#= g.args #>) -> Option<<#= g.return_type #>> {
        let mut r = self.inner.borrow_mut();
        <#= remove #>
    }
<# } #>
<# } #>
}
