<#@ template cleanws="true" #>
<#
fn create_normal_getter(f: &mut ::std::fmt::Formatter, structs: &[Struct],
	struc: &Struct, p: &Property, ids: &[Id]) -> ::std::fmt::Result {
	let pi = PropId::from(p);
	let name = pi.get_attr_name(struc); #>
	pub fn get_<#= name #>(&self) -> <#= get_return_type(&p.get_rust_type()) #> {
		let real = self.cm.get_<#= to_snake_case(&struc.name) #>(<#= get_id_args(ids, structs, struc) #>);
	<# if p.get_rust_type() == "Option<String>" { #>
		if real.<#= name #>.is_some() {
			Some(Ref::map(real, |r| r.<#= name #>.as_ref().unwrap().as_str()))
		} else {
			None
		}
	<# } else if p.get_rust_type().starts_with("Option<") {
		   if is_ref_type(&p.get_rust_type()[7..p.get_rust_type().len() - 1]) { #>
		if real.<#= name #>.is_some() {
			Some(Ref::map(real, |r| r.<#= name #>.as_ref().unwrap()))
		} else {
			None
		}
		<# } else { #>
		real.<#= name #>
		<# }
	   } else if p.get_rust_type() == "String" { #>
		Ref::map(real, |r| r.<#= name #>.as_str())
	<# } else if p.get_rust_type().starts_with("Vec<") { #>
		Ref::map(real, |r| r.<#= name #>.as_slice())
	<# } else if is_ref_type(&p.get_rust_type()) { #>
		Ref::map(real, |r| &r.<#= name #>)
	<# } else { #>
		real.<#= name #>
	<# } #>
	}
<#
	Ok(())
}


#>
<# for struc in &self.0.structs { #>
<#= doc_comment(&struc.doc) #>
pub struct <#= struc.name #>Mut<'a> {
	pub(crate) connection: InnerConnection,
	pub(crate) inner: &'a <#= struc.name #>,
}

impl<'a> Deref for <#= struc.name #>Mut<'a> {
	type Target = <#= struc.name #>;

	fn deref(&self) -> &Self::Target {
		self.inner
	}
}

impl<'a> <#= struc.name #>Mut<'a> {
<#
	// Normal properties
	// TODO Implement get_mut_xxx for nested structs
	/*for p in struc.properties.iter().filter(|p| p.get_get(struc)
		&& struc.id.iter().filter(|i| i.prop == p.name).next().is_none()
		&& !p.name.ends_with("Data")
		&& p.name != "Server"
		&& p.name != "OwnClient"
		&& p.modifier.is_none()) {
		create_normal_getter(f, &self.0.structs, struc, p, &struc.id)?;
	}*/
#>
}

<# } #>
